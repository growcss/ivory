@charset "UTF-8";

/// The border-image CSS property allows drawing an image on the borders of elements.
///
/// @example scss - Usage
///   .border-image {
///     @include border-image(url(border.png) 30 round);
///   }
///
/// @example css - CSS Output
///   .border-image {
///     -webkit-border-image: url(border.png) 30 round;
///     -moz-border-image: url(border.png) 30 round;
///     -o-border-image: url(border.png) 30 round;
///     border-image: url(border.png) 30 round;
///   }
///
/// @param {String} $visibility [source slice width outset repeat | initial | inherit]
///
@mixin border-image($borders...) {
  $webkit-borders: ();
  $spec-borders: ();

  @each $border in $borders {
    $webkit-border: ();
    $spec-border: ();
    $border-type: type-of($border);

    @if $border-type == string or list {
      $border-str:    if($border-type == list, nth($border, 1), $border);
      $url-str:       str-slice($border-str, 1, 3);
      $gradient-type: str-slice($border-str, 1, 6);

      @if $url-str == "url" {
        $webkit-border: $border;
        $spec-border:   $border;
      } @else if $gradient-type == "linear" {
        $gradients: linear-gradient-parser("#{$border}");
        $webkit-border: map-get($gradients, webkit-image);
        $spec-border:   map-get($gradients, spec-image);
      } @else if $gradient-type == "radial" {
        $gradients: radial-gradient-parser("#{$border}");
        $webkit-border: map-get($gradients, webkit-image);
        $spec-border:   map-get($gradients, spec-image);
      } @else {
        $webkit-border: $border;
        $spec-border:   $border;
      }
    } @else {
      $webkit-border: $border;
      $spec-border:   $border;
    }

    $webkit-borders: append($webkit-borders, $webkit-border, comma);
    $spec-borders:   append($spec-borders, $spec-border, comma);
  }

  @include prefixer(border-image, $webkit-borders, webkit moz o);
  @include prefixer(border-image, $spec-borders, spec);
  border-style: solid;
}
