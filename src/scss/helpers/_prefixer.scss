@charset "UTF-8";

/// A mixin for generating vendor prefixes on non-standardized properties.
///
/// @param {String} $property
///   Property to prefix
///
/// @param {*} $value
///   Value to use
///
/// @param {List} $prefixes
///   Prefixes to define
///
/// @example scss - Usage
///   .element {
///     @include prefixer(border-radius, 10px, (webkit, ms, spec));
///   }
///
/// @example css - CSS Output
///   .element {
///     -webkit-border-radius: 10px;
///     -moz-border-radius: 10px;
///     border-radius: 10px;
///   }
@mixin prefixer($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    @if $prefix != spec and config-get("i-prefix.#{$prefix}") {
      #{"-" + $prefix + "-" + $property}: $value;
    }

    @if $prefix == spec and config-get("i-prefix.spec") {
      #{$property}: $value;
    }
  }
}

/// Disable all prefixes.
@mixin disable-prefixes() {
  @include config-set("prefix.webkit", false, true);
  @include config-set("prefix.moz", false, true);
  @include config-set("prefix.ms", false, true);
  @include config-set("prefix.o", false, true);
  @include config-set("prefix.spec", false, true);
}
