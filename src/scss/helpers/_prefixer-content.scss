@charset "UTF-8";

/// A mixin for generating vendor prefixes on non-standardized properties.
///
/// @param {String} $property
///   Property to prefix
///
/// @param {List} $prefixes
///   Prefixes to define
///
/// @param {String} $at
///
/// @example scss - Usage
///   .element {
///     @include prefixer(keyframes identifier, webkit ms spec, @) {
///       0% { top: 0; left: 0; }
///       30% { top: 50px; }
///       68%, 72% { left: 50px; }
///       100% { top: 100px; left: 100%; }
///     }
///   }
///
/// @example css - CSS Output
///   .element {
///     @-webkit-keyframes identifier {
///       0% { top: 0; left: 0; }
///       30% { top: 50px; }
///       68%, 72% { left: 50px; }
///       100% { top: 100px; left: 100%; }
///     }
///     @-moz-keyframes identifier {
///       0% { top: 0; left: 0; }
///       30% { top: 50px; }
///       68%, 72% { left: 50px; }
///       100% { top: 100px; left: 100%; }
///     }
///     @keyframes identifier {
///       0% { top: 0; left: 0; }
///       30% { top: 50px; }
///       68%, 72% { left: 50px; }
///       100% { top: 100px; left: 100%; }
///     }
///   }
@mixin prefixer-content($property, $prefixes: (), $at: "") {
  @each $prefix in $prefixes {
    @if $prefix != spec and config-get("i-prefix.#{$prefix}") {
      #{$at + "-" + $prefix + "-" + $property} {
        @content;
      }
    }

    @if $prefix == spec and config-get("i-prefix.spec") {
      #{$at+$property} {
        @content;
      }
    }
  }
}
