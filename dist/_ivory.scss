@charset "UTF-8";

//      A simple mixin library for Sass
//
//                http://growcss.de
//
//         Authors: Daniel Bannert (@anolilab)
//
//      This project is licensed under the terms of the MIT license
// - - - - - - - - - - - - - - - - - - - - - - - - -

/// Namespace
$config-namespace: "i-" !global;

/// Colors
$black: #000;
$white: #fff;
$gray20: #333;

$media-expressions: ();

@include config-set("color-black", $black, true);
@include config-set("color-white", $white, true);

/// Global variable for em.
@include config-set("base-em", 16px, true);

/// Components Settings
@include config-set("am-prefix", "ui", true);

@include config-set("background-clip", "padding-box", true);
@include config-set("background-origin", "content-box", true);
@include config-set("background-size", 100% auto, true);

@include config-set("border-radius", rem(5), true);
@include config-set("border-opacity", "padding-box", true);

@include config-set("box-shadow-inset", null, true);
@include config-set("box-shadow-h-offset", 0, true);
@include config-set("box-shadow-v-offset", 0, true);
@include config-set("box-shadow-blur", 5px, true);
@include config-set("box-shadow-spread", null, true);
@include config-set("box-shadow-color", $gray20, true);

/// Global variables to enable or disable vendor prefixes.
@include config-set("prefix.webkit", true, true);
@include config-set("prefix.moz", true, true);
@include config-set("prefix.ms", true, true);
@include config-set("prefix.o", true, true);
@include config-set("prefix.spec", true, true);

/// Remove all non-true value of a list.
@function compact($list...) {
  $result: ();

  @each $item in $list {
    @if $item != null and $item != false and $item != "" {
      $result: append($result, $item);
    }
  }

  @return $result;
}

/// Convert angle
///
/// @author Chris Eppstein
///
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
///
/// @return {Number} Converted angle
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Programatically determines whether a color is light or dark.
///
/// @param {Color (Hex)} $color
///
/// @example scss - Usage
///   is-light($color)
///
/// @return {bool}
@function is-light($hex-color) {
  $-local-red: red(rgba($hex-color, 1));
  $-local-green: green(rgba($hex-color, 1));
  $-local-blue: blue(rgba($hex-color, 1));
  $-local-lightness: ($-local-red * 0.2126 + $-local-green * 0.7152 + $-local-blue * 0.0722) / 255;

  @return $-local-lightness > 0.6;
}

/// Strips the unit from a number.
///
/// @param {Number (With Unit)} $value
///
/// @example scss - Usage
///   $dimension: strip-units(10em);
///
/// @example css - CSS Output
///   $dimension: 10;
///
/// @return {Number (Unitless)}
@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}

/// Converts shorthand to the 4-value syntax.
///
/// @param {List} $shorthand
///
/// @example scss - Usage
///   .element {
///     margin: unpack(1em 2em);
///   }
///
/// @example css - CSS Output
///   .element {
///     margin: 1em 2em 1em 2em;
///   }
@function unpack($shorthand) {
  @if length($shorthand) == 1 {
    @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);
  } @else if length($shorthand) == 2 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);
  } @else if length($shorthand) == 3 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);
  } @else {
    @return $shorthand;
  }
}

/// Checks if a list contains a value(s).
///
/// @param {ArgList} $list
///   The list to check against.
///
/// @param {ArgList} $values
///   A single value or list of values to check for.
///
/// @example scss - Usage
///   contains($list, $value)
///
/// @return {Bool}
@function contains($list, $values...) {
  @if not is-list($list) {
    @warn "argument error: #{$list}";
    @return "error";
  }

  @each $value in $values {
    @if type-of(index($list, $value)) != "number" {
      @return false;
    }
  }

  @return true;
}

/// Find Opposite Direction
@function opposite-direction($dir) {
  @if $dir == "left" {
    @return right;
  } @else if  $dir == "right" {
    @return left;
  } @else if $dir == "LTR" {
    @return rtl;
  } @else if $dir == "RTL" {
    @return ltr;
  } @else if $dir == "top" {
    @return bottom;
  } @else if $dir == "bottom" {
    @return top;
  } @else {
    @warn "#{$dir} is not a direction! Make sure your direction is all lowercase!";
    @return false;
  }
}

/// Find Direction Name
@function named-direction($dir) {
  @if $dir == "LTR" {
    @return left;
  } @else if $dir == "RTL" {
    @return right;
  } @else {
    @warn "#{$dir} is not a valid HTML direction! Make sure you are using a valid HTML direction";
    @return false;
  }
}


/// Test if `$value` is an angle
///
/// @author Hugo Giraudel
///
/// @param {*} $value - Value to test
///
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == "number" and index("deg" "grad" "turn" "rad", unit($value));

  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
///
/// @author Hugo Giraudel
///
/// @param {Keyword | Angle} $value - Value to convert
///
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, "deg");
}

/// TODO
///
/// @param {Number} $val
/// @param {String} $unit [rem]
/// @param {Number} $base [config-get('i-base-em')]
@function fallback-to-px($val, $unit: rem, $base: config-get("i-base-em")) {
  @if not unitless($val) {
    $val: strip-units($val);
  }

  $output: ();

  @if type-of($val) == "string" {
    @if $val == "auto" or $val == "!important" {
      $output: join($val, $val);
      @return $output;
    }
  } @else {
    @if $val == 0 {
      $output: join(0, 0);
    } @else if $val {
      @if not unitless($base) {
        $base: strip-units($base);
      }

      $output: join(($val / $base) * 1 + $unit, $val + $unit);
    } @else {
      $output: join($val, $val);
    }

    @return $output;
  }

  @warn "#{$val} is not a valid value";
  @return false;
}

/// In functions/_import-once.scss
$imported-modules: () !global;

/// Import all modules onces.
///
/// @param {String} $module
///
/// @return {Bool}
@function import-once($module) {
  @if index($imported-modules, $module) {
    @return false;
  }

  $imported-once-files: append($imported-modules, $module) !global;
  @return true;
}

/// Checks for a valid number.
///
/// @access private
///
/// @param {Number} $value
///
/// @require {function} contains
@function is-number($value) {
  @return contains("0" "1" "2" "3" "4" "5" "6" "7" "8" "9" 0 1 2 3 4 5 6 7 8 9, $value);
}

/// Function checking if $value is a valid length
///
/// @param {*} $value - Value to test
///
/// @return {Bool}
@function is-valid-length($value) {
  @return (type-of($value) == "number" and not unitless($value))
       or (index(auto initial inherit 0, $value) != null);
}

/// Returns the legacy value for a given box-model
///
/// @access private
///
/// @param {String} $box
@function legacy-box($box) {
  $box: unquote($box);

  @if $box == padding-box {
    $box: padding;
  }

  @if $box == border-box {
    $box: border;
  }

  @if $box == content-box {
    $box: content;
  }

  @return $box;
}

/// A mixin for generating vendor prefixes on non-standardized properties.
///
/// @param {String} $property
///   Property to prefix
///
/// @param {List} $prefixes
///   Prefixes to define
///
/// @param {String} $at
///
/// @example scss - Usage
///   .element {
///     @include prefixer(keyframes identifier, webkit ms spec, @) {
///       0% { top: 0; left: 0; }
///       30% { top: 50px; }
///       68%, 72% { left: 50px; }
///       100% { top: 100px; left: 100%; }
///     }
///   }
///
/// @example css - CSS Output
///   .element {
///     @-webkit-keyframes identifier {
///       0% { top: 0; left: 0; }
///       30% { top: 50px; }
///       68%, 72% { left: 50px; }
///       100% { top: 100px; left: 100%; }
///     }
///     @-moz-keyframes identifier {
///       0% { top: 0; left: 0; }
///       30% { top: 50px; }
///       68%, 72% { left: 50px; }
///       100% { top: 100px; left: 100%; }
///     }
///     @keyframes identifier {
///       0% { top: 0; left: 0; }
///       30% { top: 50px; }
///       68%, 72% { left: 50px; }
///       100% { top: 100px; left: 100%; }
///     }
///   }
@mixin prefixer-content($property, $prefixes: (), $at: "") {
  @each $prefix in $prefixes {
    @if $prefix != spec and config-get("i-prefix.#{$prefix}") {
      #{$at + "-" + $prefix + "-" + $property} {
        @content;
      }
    }

    @if $prefix == spec and config-get("i-prefix.spec") {
      #{$at+$property} {
        @content;
      }
    }
  }
}

/// A mixin for generating vendor prefixes on non-standardized properties.
///
/// @param {String} $property
///   Property to prefix
///
/// @param {*} $value
///   Value to use
///
/// @param {List} $prefixes
///   Prefixes to define
///
/// @example scss - Usage
///   .element {
///     @include prefixer(border-radius, 10px, (webkit, ms, spec));
///   }
///
/// @example css - CSS Output
///   .element {
///     -webkit-border-radius: 10px;
///     -moz-border-radius: 10px;
///     border-radius: 10px;
///   }
@mixin prefixer($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    @if $prefix != spec and config-get("i-prefix.#{$prefix}") {
      #{"-" + $prefix + "-" + $property}: $value;
    }

    @if $prefix == spec and config-get("i-prefix.spec") {
      #{$property}: $value;
    }
  }
}

/// Disable all prefixes.
@mixin disable-prefixes() {
  @include config-set("prefix.webkit", false, true);
  @include config-set("prefix.moz", false, true);
  @include config-set("prefix.ms", false, true);
  @include config-set("prefix.o", false, true);
  @include config-set("prefix.spec", false, true);
}

/// Attribute Modules for CSS
///
/// @param {String} $module
/// @param {String | Null} $trait [null]
///
/// @link http://amcss.github.io/
///
/// @example scss - Usage
///   @include am(module) {
///      color: red;
///    }
///
///    @include am(module, blue) {
///      color: blue;
///    }
///
///    @include am(module, large) {
///      font-size: 2em;
///    }
///
/// @example css - CSS Output
///  [ui-module] {
///    color: red;
///  }
///
///  [ui-module~="blue"] {
///    color: blue;
///  }
///
///  [ui-module~="large"] {
///    font-size: 2em;
///  }
@mixin am($module, $trait: null) {
  $prefix: config-get("i-am-prefix");

  @if $trait != null {
    [#{$prefix}-#{$module}~="#{$trait}"] {
      @content;
    }
  } @else {
    [#{$prefix + "-" + $module}] {
      @content;
    }
  }
}

/// A simple shortcode for border.
///
/// @param {Color} $color [config-get('i-border-color')]
/// @param {Length} $width [config-get('i-border-width')]
/// @param {String} $style [config-get('i-border-style')]
///
/// @example scss - Usage
///   .example-basic-border {
///     @include shorthand-border(1px, #000);
///   }
///
///   .example-4sided-border  {
///     @include shorthand-border(1px 1px 0px 1px, #ccc #000, dashed);
///   }
///
///   .example-4color-border  {
///     @include shorthand-border(1px, #ccc #000 #333 #555);
///   }
///
///   .example-2style-border {
///     @include shorthand-border(1px, #000, solid dashed);
///   }
///
/// @example css - CSS Output
///   .example-basic-border {
///     border: 1px solid black;
///   }
///
///   .example-4sided-border {
///     border-width: 1px 1px 0px 1px;
///     border-style: dashed;
///     border-color: #cccccc black;
///   }
///
///   .example-4color-border {
///     border-width: 1px;
///     border-style: solid;
///     border-color: #cccccc black #333333 #555555;
///   }
///
///   .example-2style-border {
///     border-width: 1px;
///     border-style: solid dashed;
///     border-color: black;
///   }
@mixin border($width: config-get("i-border-width"), $color: config-get("i-border-color"), $style: config-get("i-border-style")) {
  @if length($width) > 1 {
    border-width: $width;
    border-style: $style;
    border-color: $color;
  } @else if length($style) > 1 {
    border-width: $width;
    border-style: $style;
    border-color: $color;
  } @else if length($color) > 1 {
    border-width: $width;
    border-style: $style;
    border-color: $color;
  } @else  {
    border: $width $style $color;
  }
}

/// Horizontally centers block elements
///
/// @access public
///
/// @example scss - Usage
///   .foo {
///     @include center-block;
///   }
///
/// @example css - Result
///   .foo {
///     display: block;
///     margin-left: auto;
///     margin-right: auto;
///   }
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

/// Micro Clearfix by Nicolas Gallagher.
///
/// @link http://nicolasgallagher.com/micro-clearfix-hack/
///
/// @access public
///
/// @example scss - Usage
///   body {
///     @include clearfix();
///   }
///
/// @example css - CSS Output
///   body {
///     *zoom: 1;
///   }
///
///   body:before {
///     content: " ";
///     display: table;
///   }
///
///   body:after {
///     content: " ";
///     display: table;
///     clear: both;
///   }
@mixin clearfix() {
  *zoom: 1;

  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

/// Allows you to pass it arguments to easily output a
/// light or dark color of your choosing based on the
/// lightness of another color.
///
/// @param {Color} $background-color
/// @param {Color} $light-color [config-get('contrasting-color-light')]
/// @param {Color} $dark-color [config-get('contrasting-color-dark')]
///
/// @return {Color}
@function contrasting-color($background-color, $light-color: config-get("contrasting-color-light"), $dark-color: config-get("contrasting-color-dark")) {
  @if is-light($background-color) {
    @return $dark-color;
  } @else {
    @return $light-color;
  }
}

/// Replaces ending of text with "..." when it
/// no longer fits in the container element.
///
/// @example scss - Usage
///   .text-container {
///     @include dotdotdot();
///   }
///
/// @example css - CSS Output
///   .text-container {
///     max-width: 100%;
///     overflow: hidden;
///     text-overflow: ellipsis;
///     white-space: nowrap;
///   }
@mixin dotdotdot() {
  max-width: 100%;          /// Disallow expansion beyond parent container
  overflow: hidden;         /// Must be different from 'visible'
  text-overflow: ellipsis;  /// This is where the magic happens
  white-space: nowrap;      /// Allow one line of text only
}

/// Given a font size in pixels, reproduces that font size in rems.
///
/// @access public
///
/// @param {Length} $size - Font size
/// @param {String} $unit [rem]
///
/// @example scss - Usage
///   .foo {
///     @include font-size(16px);
///   }
///
/// @example css - Result
///   .foo {
///     font-size: 16px;
///     font-size: 1rem;
///   }
@mixin font-size($size, $unit: rem) {
  @if $unit == em {
    @include em("font-size", $size);
  } @else {
    @include rem("font-size", $size);
  }
}

/// Retina Images
///
/// @param {String} $image
/// @param {String} $type
/// @param {Number} $size [100%]
///
/// @example scss - Usage
///   .my-class {
///     @include image-2x("logo", "png", 100px 25px);
///   }
///
/// @example css - CSS Output
///   .logo {
///     background: url("logo.png") no-repeat;
///   }
///
///   @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6 / 2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
///     div.logo {
///       background-image: url("logo@2x.png");
///       background-size: 100px 25px;
///     }
///   }
@mixin image-2x($image, $type, $size: 100%) {
  background-image: url($image + "." + $type);

  // @include media('>=tablet', 'retina2x') {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image + "@2x." + $type);
    background-size: $size;
  }
}

/// Generates line-height values in both pixels and rems.
///
/// @access public
///
/// @param {Number} $height-value [12] - Height value
/// @param {String} $unit [rem]
///
/// @example scss - Usage
///   .foo {
///     @include line-height(16);
///   }
///
/// @example css - Result
///   .foo {
///     line-height: 16px;
///     line-height: 1rem;
///   }
@mixin line-height($height-value: 12, $unit: rem) {
  @if $unit == em {
    @include em("line-height", $height-value);
  } @else {
    @include rem("line-height", $height-value);
  }
}

/// Generate position properties in shorthand form.
///
/// @param {List}   $values         List of numbers or `auto`
/// @param {List}   $sides          List of sides (`top`, `left`, `bottom`, `right` or `all`)
/// @param {String} $pos            Position keyword or `none`
/// @param {Bool}   $auto-overwrite If `true` all non specified $sides will be set to `auto`
///
/// NOTE: `$values` get mapped to `$sides` in the order they are declared, see usage below
///
/// https:///gist.github.com/nicolas-cusan/8fc0cef0f466f6ca2ebc
///
/// @example scss - Usage
///   .my-class {
///     @include position(0, top left);
///   }
///
/// @example css - CSS Output
///   .my-class {
///     position: fixed;
///     top: 0;
///     left: 0;
///     right: 0;
///     bottom: 0;
///   }
///
/// @example scss - Usage
///   .my-class {
///     @include position(auto 200px 3em, top left right);
///   }
///
/// @example css - CSS Output
///   .my-class {
///     position: absolute;
///     top: auto;
///     left: 200px;
///     right: 3em;
///   }
///
/// @example scss - Usage
///   .my-class {
///     @include position(0 3px, left top, none);
///   }
///
/// @example css - CSS Output
///   .my-class {
///     top: 3px;
///     left: 0;
///   }
///
/// @example scss - Usage
///   .my-class {
///     @include position(0 200px, top left, $auto-overwrite: true);
///   }
///
/// @example css - CSS Output
///   .my-class {
///     position: absolute;
///     top: 0;
///     left: 200px;
///     right: auto;
///     bottom: auto;
///   }
@mixin position($values, $sides, $pos: absolute, $auto-overwrite: false) {
  /// Vars
  $positions: absolute, relative, fixed, static;
  $map: (bottom: null, left: null, right: null, top: null);

  /// Set everything to auto to overwrite other styles.
  /// Edge case but can be useful.
  @if $auto-overwrite {
    $map: (bottom: auto, left: auto, right: auto, top: auto);
  }

  /// Validate `$values` & `$sides` input and warn (input gets rendered though)
  @each $value in $values {
    @if type-of($value) == number or $value == auto {} @else {
      @warn "Invalid amount: #{$value}";
    }
  }

  @each $side in $sides {
    @if index(map-keys($map), $side) or $side == all {} @else {
      @warn "Invalid side: #{$side}";
    }
  }

  /// Render & Validate `$pos`
  @if index($positions, $pos) {
    position: $pos;
  } @else if $pos != none {
    @warn "The $pos argument is invalid, use `absolute`, `fixed`, `relative`, `static`, or `none` (invalid value: #{$pos})";
  }

  /// Populate the map with `$sides`
  @if $sides == all and length($values) == 1 {
    bottom: $values; left: $values; right: $values; top: $values;
  } @else if length($sides) == length($values) {
    @for $i from 1 through length($sides) {
      $map: map-merge($map, (nth($sides, $i):nth($values, $i)));
    }
  } @else if length($values) == 1 {
    @for $i from 1 through length($sides) {
      $map: map-merge($map, (nth($sides, $i):$values));
    }
  } @else {
    @warn "The number of $values has to match the $sides or be a single value";
  }

  /// Render (properties with value `null` don"t get rendered)
  @each $key, $val in $map {
    #{$key}: #{$val};
  }
}

/// Convert pixels to ems
/// eg. for a relational value of 12px write em(12) when the parent is 16px.
///
/// @param {String} $prop
/// @param {Number} $pxval
/// @param {Number} $base  if you like to change the base px config-get("i-base-em")
///
/// @example scss - Usage
///   .unit {
///     width: em(16);
///   }
///
/// @example css - CSS Output
///   .unit {
///     width: 16px;
///     width: 1em;
///   }
@mixin em($prop, $pxval, $base) {
  $px-list: ();
  $em-list: ();

  @each $val in $vals {
    $calcs: fallback-to-px($val, em, $base);
    $px-list: append($px-list, nth($calcs, 1));
    $em-list: append($em-list, nth($calcs, 2));
  }

  #{$prop}: $px-list;
  #{$prop}: $em-list;
}

/// Convert pixels to rems
/// eg. for a relational value of 12px write rem(12)
/// Assumes config-get("i-base-em") is the font-size of <html>
///
/// @param {String} $prop
/// @param {Number} $pxval
/// @param {Number} $base  if you like to change the base px config-get("i-base-em")
///
/// @example scss - Usage
///   .unit {
///     width: rem(16);
///   }
///
/// @example css - CSS Output
///   .unit {
///     width: 16px;
///     width: 1rem;
///   }
@mixin rem($prop, $pxval, $base) {
  $px-list: ();
  $rem-list: ();

  @each $val in $vals {
    $calcs: fallback-to-px($val, rem, $base);
    $px-list: append($px-list, nth($calcs, 1));
    $rem-list: append($rem-list, nth($calcs, 2));
  }

  #{$prop}: $px-list;
  #{$prop}: $rem-list;
}

/// Each of these mixins support comma separated lists of values, which allows different transitions for individual properties to be described in a single style rule.
/// Each value in the list corresponds to the value at that same position in the other properties.
///
/// @param {List} $animations...
///
@mixin animation($animations...) {
  @include prefixer(animation, $animations, webkit moz spec);
}

/// Name of any animation as a string.
///
/// @param {List} $names [keyframename | none | initial | inherit]
///
/// @example scss - Usage
///   .animation-name {
///     @include animation-name(test);
///   }
///
/// @example css - CSS Output
///   .animation-name {
///     -webkit-animation-name: test;
///     -moz-animation-name: test;
///     animation-name: test;
///   }
@mixin animation-name($names...) {
  /// @if contains("none initial inherit", $names) == false or $names != "string" {
  ///   @error "`animation-name` supports only `keyframename | none | initial | inherit` you used #{$names}";
  ///   @return "error";
  /// }

  @include prefixer(animation-name, $names, webkit moz spec);
}

/// Duration of the entire animation in seconds. [time | initial | inherit]
@mixin animation-duration($times...) {
  /// @if contains("initial inherit", $times) == false or $times != "number" {
  ///   @error "`animation-duration` supports only `time | initial | inherit` you used #{$times}";
  ///   @return "error";
  /// }

  @include prefixer(animation-duration, $times, webkit moz spec);
}

/// The timing function(s) to be used between keyframes. [ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier($number, $number, $number, $number)]
@mixin animation-timing-function($motions...) {
  @include prefixer(animation-timing-function, $motions, webkit moz spec);
}

/// The number of times an animation cycle is played. [number | infinite | initial | inherit]
@mixin animation-iteration-count($values...) {
  /// @if contains("infinite initial inherit", $values) == false or $values != "number" {
  ///   @error "`animation-iteration-count` supports only `number | infinite | initial | inherit` you used #{$values}";
  ///   @return "error";
  /// }

  @include prefixer(animation-iteration-count, $values, webkit moz spec);
}

/// Whether or not the animation should play in reverse on alternate cycles. [normal | reverse | alternate | alternate-reverse | initial | inherit]
@mixin animation-direction($directions...) {
  /// @if contains("normal reverse alternate alternate-reverse initial inherit", $directions) == false {
  ///   @error "`animation-direction` supports only `normal | reverse | alternate | alternate-reverse | initial | inherit` you used #{$directions}";
  ///   @return "error";
  /// }

  @include prefixer(animation-direction, $directions, webkit moz spec);
}

/// Whether the animation is running or paused. [running | paused | initial | inherit]
@mixin animation-play-state($states...) {
  /// @if contains("running paused initial inherit", $states) == false {
  ///   @error "`animation-play-state` supports only `running | paused | initial | inherit` you used #{$states}";
  ///   @return "error";
  /// }

  @include prefixer(animation-play-state, $states, webkit moz spec);
}

/// The animation-delay property specifies a delay for the start of an animation. [time | initial | inherit]
@mixin animation-delay($times...) {
  @include prefixer(animation-delay, $times, webkit moz spec);
}

/// What values are applied by the animation outside the time it is executing. [none | forwards | backwards | both | initial | inherit]
@mixin animation-fill-mode($modes...) {
  /// @if contains("none forwards backwards both initial inherit", $modes) == false {
  ///   @error "`animation-fill-mode` supports only `none | forwards | backwards | both | initial | inherit` you used #{$modes}";
  ///   @return "error";
  /// }

  @include prefixer(animation-fill-mode, $modes, webkit moz spec);
}

/// Change the appearance for Mozilla, Webkit and possibly the future.
/// The appearance property is currently not present in any newer CSS specification.
///
/// There is no official list of accepted values, but you might check these source:
///
///   * [Mozilla](https://developer.mozilla.org/en/CSS/-moz-appearance)
///   * [Webkit](http://code.google.com/p/webkit-mirror/source/browse/Source/WebCore/css/CSSValueKeywords.in?spec=svnf1aea559dcd025a8946aa7da6e4e8306f5c1b604&r=63c7d1af44430b314233fea342c3ddb2a052e365)
///     (search for 'appearance' within the page)
///
/// @example scss - Usage
///   .appearance {
///     @include appearance(normal);
///   }
///
/// @example css - CSS Output
///   .appearance {
///     -webkit-appearance: normal;
///     -moz-appearance: normal;
///     appearance: normal;
///   }
///
/// @param {String} $value [normal | icon | window | button | menu | field]
@mixin appearance($value) {
  // There is no caniuse tracking for appearance.
  $value: unquote($value);
  @include prefixer(appearance, $value, webkit moz spec);
}

/// The backface-visibility property defines whether or not an
/// element should be visible when not facing the screen.
///
/// @example scss - Usage
///   .backface-visibility {
///     @include backface-visibility(visible);
///   }
///
/// @example css - CSS Output
///   .backface-visibility {
///     -webkit-backface-visibility: visible;
///     backface-visibility: visible;
///   }
///
/// @param {string} $visibility [visible | hidden | initial | inherit]
@mixin backface-visibility($visibility) {
  $visibility: unquote($visibility);
  @include prefixer(backface-visibility, $visibility, webkit spec);
}

/// The border-image CSS property allows drawing an image on the borders of elements.
///
/// @example scss - Usage
///   .border-image {
///     @include border-image(url(border.png) 30 round);
///   }
///
/// @example css - CSS Output
///   .border-image {
///     -webkit-border-image: url(border.png) 30 round;
///     -moz-border-image: url(border.png) 30 round;
///     -o-border-image: url(border.png) 30 round;
///     border-image: url(border.png) 30 round;
///   }
///
/// @param {String} $visibility [source slice width outset repeat | initial | inherit]
@mixin border-image($borders...) {
  $webkit-borders: ();
  $spec-borders: ();

  @each $border in $borders {
    $webkit-border: ();
    $spec-border: ();
    $border-type: type-of($border);

    @if $border-type == string or list {
      $border-str:    if($border-type == list, nth($border, 1), $border);
      $url-str:       str-slice($border-str, 1, 3);
      $gradient-type: str-slice($border-str, 1, 6);

      @if $url-str == "url" {
        $webkit-border: $border;
        $spec-border:   $border;
      } @else if $gradient-type == "linear" {
        $gradients: linear-gradient-parser("#{$border}");
        $webkit-border: map-get($gradients, webkit-image);
        $spec-border:   map-get($gradients, spec-image);
      } @else if $gradient-type == "radial" {
        $gradients: radial-gradient-parser("#{$border}");
        $webkit-border: map-get($gradients, webkit-image);
        $spec-border:   map-get($gradients, spec-image);
      } @else {
        $webkit-border: $border;
        $spec-border:   $border;
      }
    } @else {
      $webkit-border: $border;
      $spec-border:   $border;
    }

    $webkit-borders: append($webkit-borders, $webkit-border, comma);
    $spec-borders:   append($spec-borders, $spec-border, comma);
  }

  @include prefixer(border-image, $webkit-borders, webkit moz o);
  border-image: $spec-borders;
  border-style: solid;
}

/// Opacity should be on a 100 point scale (0-100 instead of 0.0-1.0)
/// This should be used to supplement a normal border definition as it
/// only deals with the 'border-color' property.
@mixin border-opacity($color, $opacity) {
  $opacity: $opacity / 100;

  /// Unsupporting browsers get this
  border-color: $color;

  /// Browsers that support RGBA will get this instead
  border-color: rgba($color, $opacity);

  /// Prevent the element's background from reaching the edge of the border
  background-clip: config-get("i-border-opacity");
}

/// Round all corners by a specific amount, defaults to value of `config-get("i-border-radius")`.
///
/// When two values are passed, the first is the horizontal radius
/// and the second is the vertical radius.
///
/// Note: webkit does not support shorthand syntax for several corners at once.
/// So in the case where you pass several values only the first will be passed to webkit.
///
/// @example scss - Usage
///   .simple   {
///     @include border-radius(4px, 4px);
///   }
///   .compound {
///     @include border-radius(2px 5px, 3px 6px);
///   }
///   .crazy    {
///     @include border-radius(1px 3px 5px 7px, 2px 4px 6px 8px)
///   }
///
/// @example css - CSS Output
///   .simple {
///     -moz-border-radius: 4px / 4px;
///     -webkit-border-radius: 4px 4px;
///     border-radius: 4px / 4px;
///   }
///   .compound {
///     -moz-border-radius: 2px 5px / 3px 6px;
///     -webkit-border-radius: 2px 3px;
///     border-radius: 2px 5px / 3px 6px;
///   }
///  .crazy {
///    -moz-border-radius: 1px 3px 5px 7px / 2px 4px 6px 8px;
///    -webkit-border-radius: 1px 2px;
///    border-radius: 1px 3px 5px 7px / 2px 4px 6px 8px;
///  }
@mixin border-radius($radius: config-get("i-border-radius"), $vertical-radius: false) {
  /// Legacy Webkit didn't understand the official shorthand syntax for specifying a vertical radius.
  $legacy-webkit-radius: first-value-of($radius);
  @if $vertical-radius {
    $legacy-webkit-radius: append($legacy-webkit-radius, first-value-of($vertical-radius));
  }

  @include prefix(border-radius, $legacy-webkit-radius, webkit);

  /// Official syntax for everyone else
  @include prefix(border-radius, if($vertical-radius, #{$radius} / #{$vertical-radius}, $radius), o ms moz spec);
}

/// Round radius at position by amount.
///
/// * legal values for `$vert`: `top`, `bottom`
/// * legal values for `$horz`: `left`, `right`
@mixin border-corner-radius($vert, $horz, $radius: config-get("i-border-radius")) {
  /// Support for mozilla's syntax for specifying a corner
  @include prefix("border-radius-#{$vert}#{$horz}", $radius, moz);
  /// Official syntax for everyone else
  @include prefix("border-#{$vert}-#{$horz}-radius", $radius, o ms webkit spec);
}

/// Round top-left corner only
@mixin border-top-left-radius($radius: config-get("i-border-radius")) {
  @include border-corner-radius(top, left, $radius);
}

/// Round top-right corner only
@mixin border-top-right-radius($radius: config-get("i-border-radius")) {
  @include border-corner-radius(top, right, $radius);
}

/// Round bottom-left corner only
@mixin border-bottom-left-radius($radius: config-get("i-border-radius")) {
  @include border-corner-radius(bottom, left, $radius);
}

/// Round bottom-right corner only
@mixin border-bottom-right-radius($radius: config-get("i-border-radius")) {
  @include border-corner-radius(bottom, right, $radius);
}

/// Round both top corners by amount
@mixin border-top-radius($radius: config-get("i-border-radius")) {
  @include border-top-left-radius($radius);
  @include border-top-right-radius($radius);
}

/// Round both right corners by amount
@mixin border-right-radius($radius: config-get("i-border-radius")) {
  @include border-top-right-radius($radius);
  @include border-bottom-right-radius($radius);
}

/// Round both bottom corners by amount
@mixin border-bottom-radius($radius: config-get("i-border-radius")) {
  @include border-bottom-left-radius($radius);
  @include border-bottom-right-radius($radius);
}

/// Round both left corners by amount
@mixin border-left-radius($radius: config-get("i-border-radius")) {
  @include border-top-left-radius($radius);
  @include border-bottom-left-radius($radius);
}

/// Provides cross-browser for Webkit, Gecko, and CSS3 box shadows
/// when one or more box shadows are needed.
/// Each shadow argument should adhere to the standard css3 syntax
/// for the box-shadow property.
@mixin box-shadow($shadow...) {
  @if(length($shadow) < 0) {
    $shadow: compact(if(config-get("i-box-shadow-inset"), inset, null) config-get("i-box-shadow-h-offset") config-get("i-box-shadow-v-offset") config-get("i-box-shadow-blur") config-get("i-box-shadow-spread") config-get("i-box-shadow-color"));
  }

  @include prefixer(box-shadow, $shadow, webkit moz spe);
}

/// Provides a single cross-browser CSS box shadow for Webkit, Gecko, and CSS3.
/// Includes default arguments for color, horizontal offset, vertical offset, blur length, spread length, and inset.
@mixin single-box-shadow($hoff: null, $voff: null, $blur: null, $spread: null, $color: null, $inset: config-get("i-box-shadow-inset")) {
  /// Handle legacy argument order
  @if not ($hoff == none or $hoff == null) and type-of($hoff) != number {
    $tmp-color: $color;
    $color: $hoff;
    $hoff: $voff;
    $voff: $blur;
    $blur: $spread;
    $spread: $tmp-color;
  }

  /// Need to set these defaults here instead of the arglist to support the above backwards compat handling
  @if $hoff == null {
    $hoff: config-get("i-box-shadow-h-offset");
  }

  @if $voff == null {
    $hoff: config-get("i-box-shadow-v-offset");
  }

  @if $blur == null {
    $blur: config-get("i-box-shadow-blur");
  }

  @if $spread == null {
    $spread: config-get("i-box-shadow-spread");
  }

  @if $color  == null {
    $color: config-get("i-box-shadow-color");
  }

  @if not ($inset == true or $inset == false or $inset == null or $inset == inset) {
    @warn "$inset expected to be true or the inset keyword. Got #{$inset} instead. Using: inset";
  }

  @if $hoff == none {
    @include box-shadow(none);
  } @else {
    $full: $hoff $voff;

    @if $blur {
      $full: $full $blur;
    }

    @if $spread {
      $full: $full $spread;
    }

    @if $color {
      $full: $full $color;
    }

    @if $inset {
      $full: inset $full;
    }

    @include box-shadow($full);
  }
}

/// Method of allowing calculated values for length units.
///
/// @param {String} $prop
/// @param {Number} $pxval
///
/// @example scss - Usage
///   .calc {
///    @include calc(width, 100% - 3em);
///   }
///
/// @example css - CSS Output
///   .calc {
///     width: -moz-calc(100% - 3em);
///     width: -webkit-calc(100% - 3em);
///     width: calc(100% - 3em);
///   }
@mixin calc($prop, $value) {
  #{$prop}: -moz-calc(#{$value});
  #{$prop}: -webkit-calc(#{$value});
  #{$prop}: calc(#{$value});
}

@mixin columns($arg: auto) {
  // <column-count> || <column-width>
  @include prefixer(columns, $arg, webkit moz spec);
}

@mixin column-count($int: auto) {
  // auto || integer
  @include prefixer(column-count, $int, webkit moz spec);
}

@mixin column-gap($length: normal) {
  // normal || length
  @include prefixer(column-gap, $length, webkit moz spec);
}

@mixin column-fill($arg: auto) {
  // auto || length
  @include prefixer(column-fill, $arg, webkit moz spec);
}

@mixin column-rule($arg) {
  // <border-width> || <border-style> || <color>
  @include prefixer(column-rule, $arg, webkit moz spec);
}

@mixin column-rule-color($color) {
  @include prefixer(column-rule-color, $color, webkit moz spec);
}

@mixin column-rule-style($style: none) {
  // none | hidden | dashed | dotted | double | groove | inset | inset | outset | ridge | solid
  @include prefixer(column-rule-style, $style, webkit moz spec);
}

@mixin column-rule-width ($width: none) {
  @include prefixer(column-rule-width, $width, webkit moz spec);
}

@mixin column-span($arg: none) {
  // none || all
  @include prefixer(column-span, $arg, webkit moz spec);
}

@mixin column-width($length: auto) {
  // auto || length
  @include prefixer(column-width, $length, webkit moz spec);
}

/// Enables hyphenation for text.
///
/// @example scss - Usage
///   .text-container {
///     @include hyphens(auto);
///   }
@mixin hyphens($hyphenation: manual) {
  /// none | manual | auto
  @include prefixer(hyphens, $hyphenation, webkit moz ms spec);

  -webkit-hyphenate-character: "\2010";
  -webkit-hyphenate-limit-after: 1;
  -webkit-hyphenate-limit-before: 3;
}

/// Adds keyframes blocks for supported prefixes, removing redundant prefixes in the block"s content
///
/// @param {String} $animation-name - animation name
@mixin keyframe ($animation-name) {
  @include prefixer-content("keyframes #{$animation-name}", webkit moz ms o spec, "@") {
    @content;
  }
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
///
/// @access public
///
/// @author Hugo Giraudel
///
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
///
/// @example scss - Usage
///   .gradient {
///     @include linear-gradient(#31B7D7, #EDAC7D);
///   }
///   .gradient2 {
///     @include linear-gradient(to right, #E47D7D 0%, #C195D3 50%, #4FB4E8 100%);
///   }
///
/// @example css - Result
///   .gradient {
///     background: #31B7D7;
///     background: -webkit-linear-gradient(-90deg, #31B7D7, #EDAC7D);
///     background: linear-gradient(180deg, #31B7D7, #EDAC7D);
///   }
///   .gradient2 {
///     background: #E47D7D;
///     background: -webkit-linear-gradient(left, #E47D7D 0%, #C195D3 50%, #4FB4E8 100%);
///     background: linear-gradient(to right, #E47D7D 0%, #C195D3 50%, #4FB4E8 100%);
///   }
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

/// Generates `placeholder` content for a given element
///
/// @link MDN https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-placeholder
/// @link css-tricks http://css-tricks.com/snippets/css/style-placeholder-text/
///
/// @example scss - Usage
///   .selector {
///     @include x-placeholder {
///         color: #bada55;
///         font-weight: bold;
///     }
///   }
/// @example css - CSS Output
///  &::-webkit-input-placeholder {
///      <content property 1>: <content value 1>;
///      ...
///      <content property n>: <content value n>;
///  }
///  &::-moz-placeholder {
///      <content property 1>: <content value 1>;
///      ...
///      <content property n>: <content value n>;
///  }
///  &:-ms-input-placeholder {
///      <content property 1>: <content value 1>;
///      ...
///      <content property n>: <content value n>;
///  }
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content
  }

  &::-moz-placeholder {
    @content
  }

  &:-ms-input-placeholder {
    @content
  }
}

/// Shortcode for transitions transform
///
/// @param {Time}   $duration
/// @param {String} $timing
/// @param {Time}   $delay
/// @param {List}   $preface
///
/// @example scss - Usage
///   .transition-transform {
///     @include transition-transform(0.8s, linear);
///   }
///
/// @example css - CSS Output
///   .transition-transform {
///     -webkit-transition: -webkit-transform 0.8s linear 0s;
///     -moz-transition: -moz-transform 0.8s linear 0s;
///     -ms-transition: -ms-transform 0.8s linear 0s;
///     -o-transition: -o-transform 0.8s linear 0s;
///     transition: transform 0.8s linear 0s;
///   }
@mixin transition-transform($duration, $timing, $delay:0s, $preface:webkit moz ms o spec) {
  @each $browser in $preface {
    @if($browser == spec) {
      transition: transform $duration $timing $delay;
    } @else {
      @include prefixer(transition, -#{$browser}-transform $duration $timing $delay, $browser);
    }
  }
}
