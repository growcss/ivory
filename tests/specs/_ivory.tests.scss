//      A dot-syntax configuration (Map) library in Sass
//
//                http://growcss.de
//
//         Authors: Daniel Bannert (@anolilab)
//
//      This project is licensed under the terms of the MIT license
// - - - - - - - - - - - - - - - - - - - - - - - - -

// Sass Mixins
// - - - - - - - - - - - - - - - - - - - - - - - - -

// Sets a value to a configuration path
//
// @mixin config-set
//
// @param $key     {string} The configuration key
// @param $value   {*|null} The value to set
// @param $default {bool}   Whether the configuration is default
@mixin config-set($key, $value, $default: false) {
  $config: config-set($key, $value, $default);
}

// Remove settings
//
// @mixin config-reset
//
// @param $settings {string} Configuration path
// @param $default  {bool}   Whether the configuration is default
//
// @return          {bool}   True if the configuration path is removed.
@mixin config-reset($settings, $default:false) {
  $config-reset: config-reset($settings);
}

// Sass Variables
// - - - - - - - - - - - - - - - - - - - - - - - - -

// The delimiter of configuration path
//
// @private
$config-delimiter: "." !default;

// The configuration storage
//
// @private
$config-attr: () !default;

// The default configuration storage
//
// @private
$config-default: () !default;

// Here are all the helpers.
// - - - - - - - - - - - - - - - - - - - - - - - - -// Return list-map from `$list` and ensure input list-map is list-of-lists
//
// @function list-map-check
//
// @access public
//
// @param $list {list}
//
// @return      {list-map}
@function list-map-check($list) {
  @if length($list) == 2 and length(nth($list, 1)) == 1 {
    @return append((), $list, "comma");
  }

  @return $list;
}

// Extracts a slice of a list
//
// @function list-slice
//
// @access private
//
// @param  $list  {list}   The list to extract
// @param  $start {number} The start index to extract
// @param  $end   {number} The end index to extract
//
// @return        {list}   The extracted list
@function list-slice($list, $start: 1, $end: length($list)) {
  $output: ();

  @if $start >= 1 and $end >= $start {
    @for $i from $start through $end {
      $output: append($output, nth($list, $i));
    }
  }

  @return $output;
}

// Sets a value to a Map by the map path
//
// @function config-map-set
//
// @access private
//
// @param $map   {map}    The Map
// @param $path  {string} The map path
// @param $value {*|null} The value to set
//
// @return       {map...} A new Map
@function config-map-set($map, $path, $value) {
  $map: list-map-check($map);
  $keys: str-split($path, $config-delimiter);
  $length: length($keys);

  $result: (nth($keys, $length): $value);

  @if $length > 1 {
    @for $i from 1 through $length - 1 {
      $path: "";
      $key: nth($keys, 1);

      $j: $length - $i;
      $key: nth($keys, $j);

      $path: str-join(list-slice($keys, 1, $j), $config-delimiter);

      @if config-map-has($map, $path) {
        $value: config-map-get($map, $path);

        @if type-of($value) == "map" {
          $result: config-map-merge(($key: $value), ($key: $result));
        } @else {
          $result: ($key: $result);
        }
      } @else {
        $result: ($key: $result);
      }
    }
  }

  $map: config-map-merge($map, $result);

  @return $map;
}

// Gets a value from a Map by the map path
//
// @function config-map-get
//
// @access private
//
// @param $map  {map...} The Map
// @param $path {string} The map path
//
// @return      {*}      The value of the map path
@function config-map-get($map, $path) {
  $keys: str-split($path, $config-delimiter);
  $value: list-map-check($map);

  @each $key in $keys {
    @if type-of($value) != "map" or not map-has-key($value, $key) {
      @warn "The path '#{$path}' doesn\'t exist.";

      @return null;
    }

    $value: map-get($value, $key);
  }

  @return $value;
}

// Returns whether the key of a map path exists in a Map
//
// @function config-map-has
//
// @access private
//
// @param $map {map...} The Map
// @param $key {string} The map path
//
// @return     {bool}   True if the map path has a value,
//                            otherwise false
@function config-map-has($map, $key) {
  $keys: str-split($key, $config-delimiter);
  $value: list-map-check($map);

  @each $key in $keys {
    @if type-of($value) != "map" or not map-has-key($value, $key) {
      @return false;
    }

    $value: map-get($value, $key);
  }

  @return true;
}

// Recursively merges one or more maps
//
// @function config-map-merge
//
// @access private
//
// @param $maps {map...} The map(s) to merge
//
// @return      {map}    The merged map
@function config-map-merge($maps...) {
  $result: nth($maps, 1);

  @for $i from 1 through length($maps) - 1 {
    @each $key, $value in nth($maps, $i + 1) {
      @if type-of($result) != "map" {
        $result: ($key: $value);
      }

      @if type-of($value) == "map" {
        $value: config-map-merge(map-get($result, $key), $value);
      }

      @if $key != null {
        $result: map-merge($result, ($key: $value));
      }
    }
  }

  @return $result;
}

// Joins list elements with a string
//
// @function str-join
//
// @access private
//
// @param $list {list}   The list to join
// @param $glue {string} The glue string to join list elements
//
// @return      {string} The joined string
@function str-join($list, $glue: "") {
  $result: "";

  @if length($list) == 0 {
    @return $result;
  }

  @if length($list) > 1 {
    @for $i from 1 through length($list) - 1 {
      $result: $result + nth($list, $i) + $glue;
    }
  }

  $result: $result + nth($list, length($list));

  @return $result;
}

// Splits a string by a delimiter
//
// @function str-split
//
// @access private
//
// @param $string    {string} The string to split
// @param $delimiter {string} The boundary string to split the string
//
// @return           {list}   The splitted list
@function str-split($string, $delimiter: "") {
  $result: ();
  $length: str-length($string);

  @if str-length($delimiter) == 0 {
    @for $i from 1 through $length {
      $result: append($result, str-slice($string, $i, $i));
    }

    @return $result;
  }

  $break: false;

  @while not $break {
    $index: str-index($string, $delimiter);

    @if not $index or $index == 0 {
      $break: true;
    } @else {
      $part: if($index != 1, str-slice($string, 1, $index - 1), "");
      $result: append($result, $part);
      $string: str-slice($string, $index + str-length($delimiter));
    }
  }

  @return append($result, $string);
}

// Gets a value to/from a configuration path
//
// @function config-get
//
// @param $key     {string} The configuration path
// @param $default {bool}   Whether the configuration is default
//
// @return         {*}      The value of the configuration path
@function config-get($key, $default: false) {
  @if $default {
    @if config-map-has($config-default, $key) {
      @return config-map-get($config-default, $key);
    }
  } @else {
    @if config-map-has($config-attr, $key) {
      @return config-map-get($config-attr, $key);
    } @else if config-map-has($config-default, $key) {
      @return config-map-get($config-default, $key);
    }
  }

  @warn "The key '#{$key}' doesn\'t exist.";

  @return null;
}

// Returns whether a configuration path exists
//
// @function config-has
//
// @param $key {string} The configuration path
//
// @return     {bool}   True if the configuration path has a value,
//                           otherwise false
@function config-has($key) {
  @if config-map-has($config-attr, $key) or config-map-has($config-default, $key) {
    @return true;
  }

  @return false;
}

// Remove settings
//
// @function config-reset
//
// @param $settings {string} Configuration path
// @param $default  {bool}   Whether the configuration is default
//
// @return          {bool}   True if the configuration path is removed.
@function config-reset($settings, $default: false) {
  @if length($settings) == 1 {
    $settings: nth($settings, 1);
  }

  @each $setting in $settings {
    @if ($default) {
      $config-default: map-remove($config-default, $setting) !global;
    } @else {
      $config-attr: map-remove($config-attr, $setting) !global;
    }
  }

  @return true;
}

// Sets a value to/from a configuration path
//
// @function config
//
// @param $key     {string} The configuration key
// @param $value   {*}      The value to set
// @param $default {bool}   Whether the configuration is default
//
// @return         {*}      The value of the configuration path
@function config-set($key, $value, $default: false) {
  @if $default {
    @if config-map-has($config-default, $key) {
      $value: config-map-get($config-default, $key);
    } @else {
      $config-default: config-map-set($config-default, $key, $value) !global;
    }
  } @else {
    $config-attr: config-map-set($config-attr, $key, $value) !global;
  }

  @return $value;
}

// Here are all the functions.
// - - - - - - - - - - - - - - - - - - - - - - - - -
//     _            _           _                           _ _
//    (_)          | |         | |                         | (_)
//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _
//    | | '_ \ / __| | | | |/ _` |/ _ \ | '_ ` _ \ / _ \/ _` | |/ _` |
//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |
//    |_|_| |_|\___|_|\__,_|\__,_|\___| |_| |_| |_|\___|\__,_|_|\__,_|
//
//      Simple, elegant and maintainable media queries in Sass
//                        v1.4.1
//
//                http://include-media.com
//
//         Authors: Eduardo Boucas (@eduardoboucas)
//                  Hugo Giraudel (@hugogiraudel)
//
//      This project is licensed under the terms of the MIT license


////
/// include-media library public configuration
/// @author Eduardo Boucas
/// @access public
////


///
/// Creates a list of global breakpoints
///
/// @example scss - Creates a single breakpoint with the label `phone`
///  $breakpoints: ('phone': 320px);
///
$breakpoints: (
  'phone': 320px,
  'tablet': 768px,
  'desktop': 1024px
) !default;


///
/// Creates a list of static expressions or media types
///
/// @example scss - Creates a single media type (screen)
///  $media-expressions: ('screen': 'screen');
///
/// @example scss - Creates a static expression with logical disjunction (OR operator)
///  $media-expressions: (
///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'
///  );
///
$media-expressions: (
  'screen': 'screen',
  'print': 'print',
  'handheld': 'handheld',
  'landscape': '(orientation: landscape)',
  'portrait': '(orientation: portrait)',
  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)',
  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi)'
) !default;


///
/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals
///
/// @example scss - Interval for pixels is defined as `1` by default
///  @include media('>128px') {}
///
///  /* Generates: */
///  @media (min-width: 129px) {}
///
/// @example scss - Interval for ems is defined as `0.01` by default
///  @include media('>20em') {}
///
///  /* Generates: */
///  @media (min-width: 20.01em) {}
///
/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`
///  @include media('>2.0rem') {}
///
///  /* Generates: */
///  @media (min-width: 2.1rem) {}
///
$unit-intervals: (
  'px': 1,
  'em': 0.01,
  'rem': 0.1
) !default;

///
/// Defines whether support for media queries is available, useful for creating separate stylesheets
/// for browsers that don't support media queries.
///
/// @example scss - Disables support for media queries
///  $im-media-support: false;
///  @include media('>=tablet') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* Generates: */
///  .foo {
///    color: tomato;
///  }
///
$im-media-support: true !default;

///
/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or
/// intercept the breakpoint will be displayed, any others will be ignored.
///
/// @example scss - This media query will show because it intercepts the static breakpoint
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  @include media('>=tablet') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* Generates: */
///  .foo {
///    color: tomato;
///  }
///
/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'tablet';
///  @include media('>=desktop') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* No output */
///
$im-no-media-breakpoint: 'desktop' !default;

///
/// Selects which media expressions are allowed in an expression for it to be used when media queries
/// are not supported.
///
/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  $im-no-media-expressions: ('screen');
///  @include media('>=tablet', 'screen') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///   /* Generates: */
///   .foo {
///     color: tomato;
///   }
///
/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  $im-no-media-expressions: ('screen');
///  @include media('>=tablet', 'retina2x') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* No output */
///
$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;

////
/// Cross-engine logging engine
/// @author Hugo Giraudel
/// @access private
////


///
/// Log a message either with `@error` if supported 
/// else with `@warn`, using `feature-exists('at-error')`
/// to detect support.
/// 
/// @param {String} $message - Message to log
///
@function log($message) {
  @if feature-exists('at-error') {
    @error $message;
  } @else {
    @warn $message;
    $_: noop();
  }

  @return $message;
}


/// 
/// Wrapper mixin for the log function so it can be used with a more friendly
/// API than `@if log('..') {}` or `$_: log('..')`. Basically, use the function
/// within functions because it is not possible to include a mixin in a function
/// and use the mixin everywhere else because it's much more elegant.
///
/// @param {String} $message - Message to log
///
@mixin log($message) {
  @if log($message) {}
}


///
/// Function with no `@return` called next to `@warn` in Sass 3.3
/// to trigger a compiling error and stop the process.
///
@function noop() {}

///
/// Determines whether a list of conditions is intercepted by the static breakpoint.
///
/// @param {Arglist}   $conditions  - Media query conditions
///
/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint
///
@function im-intercepts-static-breakpoint($conditions...) {
  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);

  @if not $no-media-breakpoint-value {
    @if log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}
  }  

  @each $condition in $conditions {
    @if not map-has-key($media-expressions, $condition) {
      $operator: get-expression-operator($condition);
      $prefix: get-expression-prefix($operator);
      $value: get-expression-value($condition, $operator);

      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or
          ($prefix == 'min' and $value > $no-media-breakpoint-value) {
        @return false;
      }
    } @else if not index($im-no-media-expressions, $condition) {
      @return false;
    }
  }

  @return true;
}

////
/// Parsing engine
/// @author Hugo Giraudel
/// @access private
////


///
/// Get operator of an expression
///
/// @param {String} $expression - Expression to extract operator from
///
/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`
///
@function get-expression-operator($expression) {
  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {
    @if str-index($expression, $operator) {
      @return $operator;
    }
  }

  // It is not possible to include a mixin inside a function, so we have to
  // rely on the `log(..)` function rather than the `log(..)` mixin. Because
  // functions cannot be called anywhere in Sass, we need to hack the call in
  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with
  // Sass 3.3, change this line in `@if log(..) {}` instead.
  $_: log('No operator found in `#{$expression}`.');
}


///
/// Get dimension of an expression, based on a found operator
///
/// @param {String} $expression - Expression to extract dimension from
/// @param {String} $operator - Operator from `$expression`
///
/// @return {String} - `width` or `height` (or potentially anything else)
///
@function get-expression-dimension($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);
  $dimension: 'width';

  @if str-length($parsed-dimension) > 0 {
    $dimension: $parsed-dimension;
  }

  @return $dimension;
}


///
/// Get dimension prefix based on an operator
///
/// @param {String} $operator - Operator
///
/// @return {String} - `min` or `max`
///
@function get-expression-prefix($operator) {
  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');
}


///
/// Get value of an expression, based on a found operator
///
/// @param {String} $expression - Expression to extract value from
/// @param {String} $operator - Operator from `$expression`
///
/// @return {Number} - A numeric value 
///
@function get-expression-value($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $value: str-slice($expression, $operator-index + str-length($operator));

  @if map-has-key($breakpoints, $value) {
    $value: map-get($breakpoints, $value);
  } @else {
    $value: to-number($value);
  }

  $interval: map-get($unit-intervals, unit($value));

  @if not $interval {
    // It is not possible to include a mixin inside a function, so we have to
    // rely on the `log(..)` function rather than the `log(..)` mixin. Because
    // functions cannot be called anywhere in Sass, we need to hack the call in
    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with
    // Sass 3.3, change this line in `@if log(..) {}` instead.
    $_: log('Unknown unit `#{unit($value)}`.');
  }

  @if $operator == '>' {
    $value: $value + $interval;
  } @else if $operator == '<' {
    $value: $value - $interval;
  }

  @return $value;
}


///
/// Parse an expression to return a valid media-query expression
///
/// @param {String} $expression - Expression to parse
///
/// @return {String} - Valid media query
///
@function parse-expression($expression) {
  // If it is part of $media-expressions, it has no operator
  // then there is no need to go any further, just return the value
  @if map-has-key($media-expressions, $expression) {
    @return map-get($media-expressions, $expression);
  }

  $operator: get-expression-operator($expression);
  $dimension: get-expression-dimension($expression, $operator);
  $prefix: get-expression-prefix($operator);
  $value: get-expression-value($expression, $operator);

  @return '(#{$prefix}-#{$dimension}: #{$value})';
}

///
/// Slice `$list` between `$start` and `$end` indexes
///
/// @access private
///
/// @param {List} $list - List to slice
/// @param {Number} $start [1] - Start index
/// @param {Number} $end [length($list)] - End index
///
/// @return {List} Sliced list
///
@function slice($list, $start: 1, $end: length($list)) {
  @if length($list) < 1 or $start > $end {
    @return ();
  }

  $result: ();

  @for $i from $start through $end {
    $result: append($result, nth($list, $i));
  }

  @return $result;
}

////
/// String to number converter
/// @author Hugo Giraudel
/// @access private
////


///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}


///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);
  
  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }
  
  @return $value * map-get($units, $unit);
}

///
/// This mixin aims at redefining the configuration just for the scope of 
/// the call. It is helpful when having a component needing an extended 
/// configuration such as custom breakpoints (referred to as tweakpoints) 
/// for instance.
///
/// @author Hugo Giraudel
///
/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`
/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`
///
/// @example scss - Extend the global breakpoints with a tweakpoint
///  @include media-context(('custom': 678px)) {
///    .foo {
///      @include media('>phone', '<=custom') {
///       // ...
///      }
///    }
///  }
///
/// @example scss - Extend the global media expressions with a custom one
///  @include media-context($tweak-media-expressions: ('all': 'all')) {
///    .foo {
///      @include media('all', '>phone') {
///       // ...
///      }
///    }
///  }
///
/// @example scss - Extend both configuration maps
///  @include media-context(('custom': 678px), ('all': 'all')) {
///    .foo {
///      @include media('all', '>phone', '<=custom') {
///       // ...
///      }
///    }
///  }
///
@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {
  // Save global configuration
  $global-breakpoints: $breakpoints;
  $global-media-expressions: $media-expressions;

  // Update global configuration
  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;
  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;

  @content;

  // Restore global configuration
  $breakpoints: $global-breakpoints !global;
  $media-expressions: $tweak-media-expressions !global;
}

////
/// include-media public exposed API
/// @author Eduardo Boucas
/// @access public
////


///
/// Generates a media query based on a list of conditions
///
/// @param {Arglist}   $conditions  - Media query conditions
///
/// @example scss - With a single set breakpoint
///  @include media('>phone') { }
///
/// @example scss - With two set breakpoints
///  @include media('>phone', '<=tablet') { } 
///
/// @example scss - With custom values
///  @include media('>=358px', '<850px') { } 
///
/// @example scss - With set breakpoints with custom values
///  @include media('>desktop', '<=1350px') { } 
///
/// @example scss - With a static expression
///  @include media('retina2x') { } 
///
/// @example scss - Mixing everything
///  @include media('>=350px', '<tablet', 'retina3x') { } 
///
@mixin media($conditions...) {
  @if ($im-media-support and length($conditions) == 0) or 
      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {
    @content;
  } @else if ($im-media-support and length($conditions) > 0) {
    @media #{unquote(parse-expression(nth($conditions, 1)))} {
      // Recursive call
      @include media(slice($conditions, 2)...) {
        @content;
      }
    }    
  }
}



// Colors
//
$gray20: #333;

// Global variable for em.
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("base-em", 16px, true);

@include config-set("background-clip", "padding-box", true);
@include config-set("background-origin", "content-box", true);
@include config-set("background-size", 100% auto, true);

@include config-set("border-radius", rem(5), true);
@include config-set("border-opacity", "padding-box", true);


@include config-get("box-shadow-inset", null, true);
@include config-get("box-shadow-h-offset", 0, true);
@include config-get("box-shadow-v-offset", 0, true);
@include config-get("box-shadow-blur", 5px, true);
@include config-get("box-shadow-spread", null, true);
@include config-get("box-shadow-color", $gray20, true);

// Global variables to enable or disable vendor prefixes.
// - - - - - - - - - - - - - - - - - - - - - - - - -
@include config-set("prefix.webkit", false, true);
@include config-set("prefix.mozilla", false, true);
@include config-set("prefix.microsoft", false, true);
@include config-set("prefix.opera", false, true);
@include config-set("prefix.spec", true, true);

// Function checking if $value is a valid length
//
// @param {mixed} $value: value to test
//
// @return {bool}
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function is-valid-length($value) {
  @return (type-of($value) == "number" and not unitless($value))
       or (index(auto initial inherit 0, $value) != false);
}

// Convert pixels to ems
// eg. for a relational value of 12px write em(12) when the parent is 16px
// if the parent is another value say 24px write em(12, 24)
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function em($pxval, $base: config-get("base-em")) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }

  @if not unitless($base) {
    $base: strip-units($base);
  }

  @return ($pxval / $base) * 1em;
}

// Convert pixels to rems
// eg. for a relational value of 12px write rem(12)
// Assumes $em-base is the font-size of <html>
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function rem($pxval) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }

  $base: config-get("base-em");

  @if not unitless($base) {
    $base: strip-units($base);
  }

  @return ($pxval / $base) * 1rem;
}

// Strips the unit from a number.
//
// @param {Number (With Unit)} $value
//
// @example scss - Usage
//   $dimension: strip-units(10em);
//
// @example css - CSS Output
//   $dimension: 10;
//
// @return {Number (Unitless)}
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}

// Converts shorthand to the 4-value syntax.
//
// @param {list} $shorthand
//
// @example scss - Usage
//   .element {
//     margin: unpack(1em 2em);
//   }
//
// @example css - CSS Output
//   .element {
//     margin: 1em 2em 1em 2em;
//   }
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function unpack($shorthand) {
  @if length($shorthand) == 1 {
    @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);
  } @else if length($shorthand) == 2 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);
  } @else if length($shorthand) == 3 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);
  } @else {
    @return $shorthand;
  }
}

// Remove all non-true value of a list.
//
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function compact($list...) {
  $result: ();

  @each $item in $list {
    @if $item != null and $item != false and $item != "" {
      $result: append($result, $item);
    }
  }

  @return $result;
}

// Checks if a list contains a value(s).
//
// @param {list} $list
//   The list to check against.
//
// @param {list} $values
//   A single value or list of values to check for.
//
// @example scss - Usage
//   contains($list, $value)
//
// @return {bool}
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function contains($list, $values...) {
  @if not is-list($list) {
    @warn "argument error: #{$list}";
    @return "error";
  }

  @each $value in $values {
    @if type-of(index($list, $value)) != "number" {
      @return false;
    }
  }

  @return true;
}

// Find Opposite Direction
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function grider-opposite-direction($dir) {
  @if $dir == "left" {
    @return right;
  } @else if  $dir == "right" {
    @return left;
  } @else if $dir == "LTR" {
    @return rtl;
  } @else if $dir == "RTL" {
    @return ltr;
  } @else if $dir == "top" {
    @return bottom;
  } @else if $dir == "bottom" {
    @return top;
  } @else {
    @warn "#{$dir} is not a direction! Make sure your direction is all lowercase!";
    @return false;
  }
}

// Find Direction Name
@function grider-named-direction($dir) {
  @if $dir == "LTR" {
    @return left;
  } @else if $dir == "RTL" {
    @return right;
  } @else {
    @warn "#{$dir} is not a valid HTML direction! Make sure you are using a valid HTML direction";
    @return false;
  }
}

// Replaces ending of text with "..." when it
// no longer fits in the container element.
//
// @example scss - Usage
//   .text-container {
//     @extend %dotdotdot;
//   }
// - - - - - - - - - - - - - - - - - - - - - - - - -
@mixin dotdotdot() {
  max-width: 100%;          // Disallow expansion beyond parent container
  overflow: hidden;         // Must be different from 'visible'
  text-overflow: ellipsis;  // This is where the magic happens
  white-space: nowrap;      // Allow one line of text only
}

//
//
// @param {string} $val
// @param {string} $unit
//
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function fallback-to-px($val, $unit: rem) {
  $output: ();

  @if type-of($val) == "string" {
    @if $val == "auto" or $val == "!important" {
      $output: join($val, $val);
      @return $output;
    }
  } @else {
    @if $val == 0 {
      $output: join(0, 0);
    } @else if unitless($val) {
      $output: join($val * config-get("base-em"), $val + $unit);
    } @else {
      $output: join($val, $val);
    }

    @return $output;
  }

  @warn "#{$val} is not a valid value";
  @return false;
}

// Checks for a valid number.
//
// @param {number} $value
//
// @require {function} contains
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function is-number($value) {
  @return contains("0" "1" "2" "3" "4" "5" "6" "7" "8" "9" 0 1 2 3 4 5 6 7 8 9, $value);
}

// @private Returns the legacy value for a given box-model
// - Used by background-clip and -origin.
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function legacy-box($box) {
  $box: unquote($box);

  @if $box == padding-box {
    $box: padding;
  }

  @if $box == border-box {
    $box: border;
  }

  @if $box == content-box {
    $box: content;
  }

  @return $box;
}

// A mixin for generating vendor prefixes on non-standardized properties.
//
// @param {string} $property
//   Property to prefix
//
// @param {*} $value
//   Value to use
//
// @param {list} $prefixes
//   Prefixes to define
//
// @example scss - Usage
//   .element {
//     @include prefixer(keyframes identifier, webkit ms spec) {
//       0% { top: 0; left: 0; }
//       30% { top: 50px; }
//       68%, 72% { left: 50px; }
//       100% { top: 100px; left: 100%; }
//     }
//   }
//
// @example css - CSS Output
//   .element {
//     @-webkit-keyframes identifier {
//       0% { top: 0; left: 0; }
//       30% { top: 50px; }
//       68%, 72% { left: 50px; }
//       100% { top: 100px; left: 100%; }
//     }
//     @-moz-keyframes identifier {
//       0% { top: 0; left: 0; }
//       30% { top: 50px; }
//       68%, 72% { left: 50px; }
//       100% { top: 100px; left: 100%; }
//     }
//     @keyframes identifier {
//       0% { top: 0; left: 0; }
//       30% { top: 50px; }
//       68%, 72% { left: 50px; }
//       100% { top: 100px; left: 100%; }
//     }
//   }
//
// @require config "prefix.webkit"
// @require config "prefix.mozilla"
// @require config "prefix.microsoft"
// @require config "prefix.opera"
// @require config "prefix.spec"
// - - - - - - - - - - - - - - - - - - - - - - - - -
@mixin prefixer-content($property, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit and config-get("prefix.webkit") {
      -webkit-#{$property} {
        @content;
      }
    } @else if $prefix == moz and config-get("prefix.mozilla") {
      -moz-#{$property} {
        @content;
      }
    } @else if $prefix == ms and config-get("prefix.microsoft") {
      -ms-#{$property} {
        @content;
      }
    } @else if $prefix == o and config-get("prefix.opera") {
      -o-#{$property} {
        @content;
      }
    } @else if $prefix == spec and config-get("prefix.spec") {
      #{$property} {
        @content;
      }
    } @else  {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

// A mixin for generating vendor prefixes on non-standardized properties.
//
// @param {string} $property
//   Property to prefix
//
// @param {*} $value
//   Value to use
//
// @param {list} $prefixes
//   Prefixes to define
//
// @example scss - Usage
//   .element {
//     @include prefixer(border-radius, 10px, webkit ms spec);
//   }
//
// @example css - CSS Output
//   .element {
//     -webkit-border-radius: 10px;
//     -moz-border-radius: 10px;
//     border-radius: 10px;
//   }
//
// @require config "prefix.webkit"
// @require config "prefix.mozilla"
// @require config "prefix.microsoft"
// @require config "prefix.opera"
// @require config "prefix.spec"
// - - - - - - - - - - - - - - - - - - - - - - - - -
@mixin prefixer($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit and config-get("prefix.webkit") {
      -webkit-#{$property}: $value;
    } @else if $prefix == moz and config-get("prefix.mozilla") {
      -moz-#{$property}: $value;
    } @else if $prefix == ms and config-get("prefix.microsoft") {
      -ms-#{$property}: $value;
    } @else if $prefix == o and config-get("prefix.opera") {
      -o-#{$property}: $value;
    } @else if $prefix == spec and config-get("prefix.spec") {
      #{$property}: $value;
    } @else {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

@mixin disable-prefixes() {
  @include config-set("prefix.webkit", false, true);
  @include config-set("prefix.mozilla", false, true);
  @include config-set("prefix.microsoft", false, true);
  @include config-set("prefix.opera", false, true);
  @include config-set("prefix.spec", false, true);
}
